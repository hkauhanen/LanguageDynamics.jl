var documenterSearchIndex = {"docs":
[{"location":"interactors/","page":"Interactors","title":"Interactors","text":"CurrentModule = LanguageDynamics","category":"page"},{"location":"interactors/#Interactors","page":"Interactors","title":"Interactors","text":"","category":"section"},{"location":"interactors/","page":"Interactors","title":"Interactors","text":"yoyoyo","category":"page"},{"location":"philosophy/","page":"Philosophy","title":"Philosophy","text":"CurrentModule = LanguageDynamics","category":"page"},{"location":"philosophy/#Philosophy","page":"Philosophy","title":"Philosophy","text":"","category":"section"},{"location":"philosophy/","page":"Philosophy","title":"Philosophy","text":"The design philosophy of LanguageDynamics.jl follows David Hull's general theory of selection and its application to cultural evolution in the domain of language (see references below). There are three main types of objects: replicators, interactors and populations. In a typical case, a replicator could be a grammatical parameter, interactors would be individual speakers, and the population would correspond to a community of first-language learners; typically, we are interested in tracking how the relative frequencies of different replicators evolve through interactions between the interactors that make up the population. This framework is intended to be maximally general, however. In a more macroscopic application, for example, we could take the interactors to be entire languages.","category":"page"},{"location":"philosophy/","page":"Philosophy","title":"Philosophy","text":"info: Info\nA population is a container of interactors, who are containers of replicators. Replicators reproduce in the population through interactions between interactors, mediated by the structure of the population.","category":"page"},{"location":"philosophy/","page":"Philosophy","title":"Philosophy","text":"LanguageDynamics.jl defines an entire hierarchy of types. Replicators are composite types derived from the abstract AbstractReplicator type or one of its abstract descendants. Similarly, interactors derive ultimately from AbstractInteractor and populations from AbstractPopulation. All non-abstract replicator, interactor and population types must implement certain functions to guarantee unified behaviour, as discussed next.","category":"page"},{"location":"philosophy/#The-nature-of-populations","page":"Philosophy","title":"The nature of populations","text":"","category":"section"},{"location":"philosophy/#The-nature-of-interactors","page":"Philosophy","title":"The nature of interactors","text":"","category":"section"},{"location":"philosophy/#The-nature-of-replicators","page":"Philosophy","title":"The nature of replicators","text":"","category":"section"},{"location":"philosophy/#Rendezvous-and-actions","page":"Philosophy","title":"Rendezvous and actions","text":"","category":"section"},{"location":"philosophy/#References","page":"Philosophy","title":"References","text":"","category":"section"},{"location":"philosophy/","page":"Philosophy","title":"Philosophy","text":"(Hull, Croft, maybe Michaud?)","category":"page"},{"location":"auxiliaries/","page":"Auxiliaries","title":"Auxiliaries","text":"CurrentModule = LanguageDynamics","category":"page"},{"location":"auxiliaries/#Auxiliaries","page":"Auxiliaries","title":"Auxiliaries","text":"","category":"section"},{"location":"auxiliaries/","page":"Auxiliaries","title":"Auxiliaries","text":"yoyoyo","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"CurrentModule = LanguageDynamics","category":"page"},{"location":"getting-started/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"yoyoyo","category":"page"},{"location":"index-eventual/","page":"LanguageDynamics","title":"LanguageDynamics","text":"CurrentModule = LanguageDynamics","category":"page"},{"location":"index-eventual/#LanguageDynamics","page":"LanguageDynamics","title":"LanguageDynamics","text":"","category":"section"},{"location":"index-eventual/","page":"LanguageDynamics","title":"LanguageDynamics","text":"LanguageDynamics is a Julia package for exploring the population dynamics of language by means of agent-based simulations. It implements several common models of language acquisition, use and change (such as utterance selection and variational learning) in a variety of community structures ranging from fully mixing \"pools\" of speakers to spatial populations and multiplex networks. To facilitate extending the library with custom types and function, minimal restrictions are placed on what objects may interface with what other objects.","category":"page"},{"location":"index-eventual/","page":"LanguageDynamics","title":"LanguageDynamics","text":"The Getting started section provides installation instructions and a simple usage example. The Philosophy page explains the design philosophy of LanguageDynamics in more detail. A number of further use cases are illustrated under Examples. The Reference pages provide documentation for all available functions and objects.","category":"page"},{"location":"index-eventual/","page":"LanguageDynamics","title":"LanguageDynamics","text":"LanguageDynamics.jl is free and open-source software, licensed under the MIT license.","category":"page"},{"location":"index-eventual/#How-to-cite","page":"LanguageDynamics","title":"How to cite","text":"","category":"section"},{"location":"index-eventual/","page":"LanguageDynamics","title":"LanguageDynamics","text":"If you find this software useful and would like to reference it, please consider citing the following paper:","category":"page"},{"location":"index-eventual/","page":"LanguageDynamics","title":"LanguageDynamics","text":"FIXME","category":"page"},{"location":"index-eventual/#Contributing","page":"LanguageDynamics","title":"Contributing","text":"","category":"section"},{"location":"index-eventual/","page":"LanguageDynamics","title":"LanguageDynamics","text":"If you've found a bug or have a feature request, please file an issue.","category":"page"},{"location":"index-eventual/","page":"LanguageDynamics","title":"LanguageDynamics","text":"If you'd like to contribute code, feel free to fork the repository and submit a pull request, or drop Henri a message.","category":"page"},{"location":"index-eventual/#Acknowledgements","page":"LanguageDynamics","title":"Acknowledgements","text":"","category":"section"},{"location":"index-eventual/","page":"LanguageDynamics","title":"LanguageDynamics","text":"Preparation of this software has been supported by the Federal Ministry of Education and Research (BMBF) and the Baden-WÃ¼rttemberg Ministry of Science as part of the Excellence Strategy of the German Federal and State Governments; and by the European Research Council (project STARFISH, grant no. FIXME).","category":"page"},{"location":"populations/","page":"Populations","title":"Populations","text":"CurrentModule = LanguageDynamics","category":"page"},{"location":"populations/#Populations","page":"Populations","title":"Populations","text":"","category":"section"},{"location":"populations/","page":"Populations","title":"Populations","text":"yoyoyo","category":"page"},{"location":"type-hierarchies/","page":"The type hierarchies","title":"The type hierarchies","text":"CurrentModule = LanguageDynamics","category":"page"},{"location":"type-hierarchies/#type-hierarchies","page":"The type hierarchies","title":"The type hierarchies","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"CurrentModule = LanguageDynamics","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"yoyoyo","category":"page"},{"location":"replicators/","page":"Replicators","title":"Replicators","text":"CurrentModule = LanguageDynamics","category":"page"},{"location":"replicators/#Replicators","page":"Replicators","title":"Replicators","text":"","category":"section"},{"location":"replicators/","page":"Replicators","title":"Replicators","text":"yoyoyo","category":"page"},{"location":"all/","page":"All functions and types","title":"All functions and types","text":"CurrentModule = LanguageDynamics","category":"page"},{"location":"all/#All-functions-and-types","page":"All functions and types","title":"All functions and types","text":"","category":"section"},{"location":"all/","page":"All functions and types","title":"All functions and types","text":"","category":"page"},{"location":"all/","page":"All functions and types","title":"All functions and types","text":"Modules = [LanguageDynamics]","category":"page"},{"location":"all/#LanguageDynamics.AbstractInteractor","page":"All functions and types","title":"LanguageDynamics.AbstractInteractor","text":"Abstract interactor. The top node of the Interactor type hierarchy.\n\n\n\n\n\n","category":"type"},{"location":"all/#LanguageDynamics.AbstractLanguage","page":"All functions and types","title":"LanguageDynamics.AbstractLanguage","text":"Abstract language: an interactor that is a language (community).\n\n\n\n\n\n","category":"type"},{"location":"all/#LanguageDynamics.AbstractLatticePopulation","page":"All functions and types","title":"LanguageDynamics.AbstractLatticePopulation","text":"Abstract lattice population: interactors on some lattice.\n\n\n\n\n\n","category":"type"},{"location":"all/#LanguageDynamics.AbstractNetworkPopulation","page":"All functions and types","title":"LanguageDynamics.AbstractNetworkPopulation","text":"Abstract network population. Interactors are nodes of some network.\n\n\n\n\n\n","category":"type"},{"location":"all/#LanguageDynamics.AbstractPopulation","page":"All functions and types","title":"LanguageDynamics.AbstractPopulation","text":"Abstract population. The top node of the Population type hierarchy.\n\n\n\n\n\n","category":"type"},{"location":"all/#LanguageDynamics.AbstractProbabilisticSpeaker","page":"All functions and types","title":"LanguageDynamics.AbstractProbabilisticSpeaker","text":"Abstract probabilistic speaker: a speaker containing a probabilistic replicator.\n\n\n\n\n\n","category":"type"},{"location":"all/#LanguageDynamics.AbstractSpatialPopulation","page":"All functions and types","title":"LanguageDynamics.AbstractSpatialPopulation","text":"Abstract spatial population. Represents any type of population in which interactors have a spatial representation (e.g. a point on a plane).\n\n\n\n\n\n","category":"type"},{"location":"all/#LanguageDynamics.AbstractSpeaker","page":"All functions and types","title":"LanguageDynamics.AbstractSpeaker","text":"Abstract speaker: an interactor that is an individual.\n\n\n\n\n\n","category":"type"},{"location":"all/#LanguageDynamics.AbstractUtteranceSelector","page":"All functions and types","title":"LanguageDynamics.AbstractUtteranceSelector","text":"Abstract utterance selector: an interactor of the Utterance Selection Model type.\n\n\n\n\n\n","category":"type"},{"location":"all/#LanguageDynamics.EmptySpeaker","page":"All functions and types","title":"LanguageDynamics.EmptySpeaker","text":"An empty speaker. This is an empty type that has no functionality apart from 'existing'. Its use case is testing and debugging population-dynamic functions; linguistically, empty speakers are inert. They can be rendezvoused, technically, but nothing happens.\n\n\n\n\n\n","category":"type"},{"location":"all/#LanguageDynamics.act!-Tuple{LanguageDynamics.EmptySpeaker, LanguageDynamics.AbstractSpeaker}","page":"All functions and types","title":"LanguageDynamics.act!","text":"act!(x::EmptySpeaker, y::AbstractSpeaker)\n\nMake an EmptySpeaker attempt an action on another speaker. Does nothing and returns false.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = LanguageDynamics","category":"page"},{"location":"#LanguageDynamics","page":"Home","title":"LanguageDynamics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LanguageDynamics is a Julia package for exploring the population dynamics of language by means of agent-based simulations. It implements several common models of language acquisition, use and change (such as utterance selection and variational learning) in a variety of community structures ranging from fully mixing \"pools\" of speakers to spatial populations and multiplex networks. To facilitate extending the library with custom types and function, minimal restrictions are placed on what objects may interface with what other objects.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Getting started section provides installation instructions and a simple usage example. The Philosophy page explains the design philosophy of LanguageDynamics in more detail. A number of further use cases are illustrated under Examples. The Reference pages provide documentation for all available functions and objects.","category":"page"},{"location":"","page":"Home","title":"Home","text":"LanguageDynamics.jl is free and open-source software, licensed under the MIT license.","category":"page"}]
}
