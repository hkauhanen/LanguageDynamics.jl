var documenterSearchIndex = {"docs":
[{"location":"replicators/","page":"Replicators","title":"Replicators","text":"CurrentModule = LanguageDynamics","category":"page"},{"location":"replicators/#Replicators","page":"Replicators","title":"Replicators","text":"","category":"section"},{"location":"replicators/","page":"Replicators","title":"Replicators","text":"yoyoyo","category":"page"},{"location":"philosophy/","page":"Philosophy","title":"Philosophy","text":"CurrentModule = LanguageDynamics","category":"page"},{"location":"philosophy/#Philosophy","page":"Philosophy","title":"Philosophy","text":"","category":"section"},{"location":"philosophy/","page":"Philosophy","title":"Philosophy","text":"Broadly speaking, the design philosophy of LanguageDynamics.jl follows David Hull's general theory of selection and its application to cultural evolution in the domain of language. There are three main types of objects: replicators, interactors and populations. In a typical case, a replicator could be the setting of a grammatical parameter, interactors would be individual speakers, and the population corresponds to the speech community; typically, we would be interested in tracking how the relative frequencies of different replicators evolve through interactions between the interactors that make up the population.This framework is intended to be maximally general, however. In a more macroscopic application, for example, we could take the interactors to be entire languages.","category":"page"},{"location":"philosophy/","page":"Philosophy","title":"Philosophy","text":"info: Info\nA population is a container of interactors, who are containers of replicators. Replicators reproduce in the population through interactions between interactors.","category":"page"},{"location":"philosophy/","page":"Philosophy","title":"Philosophy","text":"LanguageDynamics.jl defines an entire hierarchy of abstract types. Replicators are composite types derived from the abstract AbstractReplicator type or one of its abstract descendants. Similarly, interactors derive ultimately from AbstractInteractor and populations from AbstractPopulation. Concrete examples will be given below.","category":"page"},{"location":"philosophy/#The-nature-of-populations","page":"Philosophy","title":"The nature of populations","text":"","category":"section"},{"location":"philosophy/#The-nature-of-interactors","page":"Philosophy","title":"The nature of interactors","text":"","category":"section"},{"location":"philosophy/#Rendezvous-and-actions","page":"Philosophy","title":"Rendezvous and actions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = LanguageDynamics","category":"page"},{"location":"#LanguageDynamics","page":"Home","title":"LanguageDynamics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LanguageDynamics is a Julia package for exploring the population dynamics of language by means of agent-based simulations. It implements several common models of language acquisition, use and change (such as utterance selection and variational learning) in a variety of community structures ranging from fully mixing \"pools\" of speakers to spatial populations and multiplex networks. To facilitate extending the library with custom types and function, minimal restrictions are placed on what objects may interface with what other objects.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Getting started section provides installation instructions and a simple usage example. The Philosophy page explains the design philosophy of LanguageDynamics in more detail. A number of further use cases are illustrated under Examples. The Reference pages provide documentation for all available functions and objects, for populations, interactors and Replicators separately. A further reference pages documents auxiliary functions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"LanguageDynamics.jl is free and open-source software, licensed under the MIT license.","category":"page"},{"location":"#How-to-cite","page":"Home","title":"How to cite","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you find this software useful and would like to reference it, please consider citing the following paper:","category":"page"},{"location":"","page":"Home","title":"Home","text":"FIXME","category":"page"},{"location":"#Bug-reports-and-feature-requests","page":"Home","title":"Bug reports and feature requests","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you've found a bug or have a feature request, please file an issue.","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Preparation of this software has been supported by the Federal Ministry of Education and Research (BMBF) and the Baden-WÃ¼rttemberg Ministry of Science as part of the Excellence Strategy of the German Federal and State Governments; and by the European Research Council (project STARFISH, grant no. FIXME).","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [LanguageDynamics]","category":"page"}]
}
